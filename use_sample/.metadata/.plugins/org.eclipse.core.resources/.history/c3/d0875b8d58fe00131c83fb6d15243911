package org.x68uec.hacku.meikyu;

import org.x68uec.hacku.makeevent.EventType;

public class Result extends Event {
	public Result(int id, int hp, int at) {
		super(id, hp, at);
	}

	@ Override
	public void UserInit() {
		// draw.createFont(0, "misaki_gothic.ttf", 30, true, 256.0f, 256.0f, 256.0f,
		// 256.0f);

		// draw.createTexture(1, "chara.png");
		// draw.createTexture(2, "enemy.png");
		// draw.createTexture(3, "weapon.png");

		super.UserInit();
	}

	@ Override
	public boolean MainLoop() {
		// 画面初期化。
		draw.clearScreen();

		String str = "";
		if (this.getPlayerHp() > 0) {
			// イベント成功時
			if (EventType.getType(eventID).isEnemy()) {
				// 戦闘勝利時
				drawHeader("Conclusion(win)", 0, 0);
				drawChara(true, false);
				drawMessage("たたかいに　かったぞ！", "（ここで能力上昇等のアナウンス）");
			} else {
				// 自動成功時
				drawHeader("Conclusion(no battle)", 0, 0);
				drawChara(true, true);
				drawMessage("へいわが　いちばん！", "（ここで能力上昇等のアナウンス）");
			}
		} else {
			// イベント失敗時（戦闘敗北時）
			drawHeader("Conclusion(lose)", 0, 0);
			drawChara(false, true);
			drawMessage("ざんねん　まけてしまった・・・。");
		}

		drawMessage(str);
		return isExit();

		// /*
		// int timer = 120;
		// float scale = draw.getWidth() / 640.0f;
		// int i, j, k;
		// i = j = k = 0;
		// // int moveX, vx;
		// // moveX = -100;
		// // vx = 0;
		// */
		// //while (true) {
		// // FPSの表示。
		// // draw.createFont(0, 30);
		// // draw.printf(0, 0, 0, "FPS : " + draw.getFps() + "  by Result");
		// // draw.drawTextureC( 1, 0, 0, 16, 16, 32, 128 );
		// // draw.drawTextureC( 1, 0, 16, 16, 16, 256, 128 );
		//
		// // 結果に応じて、自分か敵のキャラクターを残す
		// if (this.getPlayerHp() > 0) {
		// /*
		// draw.drawTextureScaleRotateC(2, 16.0f * i, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 2.0f / 8.0f, draw.getHeight() * 3.0f / 8.0f,
		// scale * 16.0f, -1.0f, 0); // 敵
		// draw.drawTextureScaleRotateC(3, 16.0f * j, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 6.0f / 8.0f - scale * 72.0f, draw.getHeight()
		// * 4.0f / 8.0f - scale * 16.0f + scale * 16.0f, scale * 8.0f,
		// 0.0f, 0); // 装備
		// draw.drawTextureScaleRotateC(1, 16.0f * k, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 6.0f / 8.0f, draw.getHeight() * 4.0f / 8.0f
		// + scale * 16.0f, scale * 8.0f, 0.0f, 0); // 自分
		// draw.createFont(0, 50);
		// draw.printf(0, 32, draw.getHeight() * 7.0f / 8.0f, "プレイヤーのしょうり。");
		// */
		// drawHeader("Conclusion(win)");
		// drawChara(true, false);
		// drawMessage("たたかいに　かったぞ！");
		// } else {
		// /*
		// draw.drawTextureScaleRotateC(2, 16.0f * i, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 2.0f / 8.0f, draw.getHeight() * 3.0f / 8.0f,
		// scale * 16.0f, 0.0f, 0); // 敵
		// draw.drawTextureScaleRotateC(3, 16.0f * j, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 6.0f / 8.0f - scale * 72.0f, draw.getHeight()
		// * 4.0f / 8.0f - scale * 16.0f + scale * 16.0f, scale * 8.0f,
		// 1.0f, 0); // 装備
		// draw.drawTextureScaleRotateC(1, 16.0f * k, 0.0f, 16.0f, 16.0f,
		// draw.getWidth() * 6.0f / 8.0f, draw.getHeight() * 4.0f / 8.0f
		// + scale * 16.0f, scale * 8.0f, 1.0f, 0); // 自分
		// draw.createFont(0, 50);
		// draw.printf(0, 32, draw.getHeight() * 7.0f / 8.0f, "ざんねん。まけてしまった。");
		// */
		// drawHeader("Conclusion(lose)");
		// drawChara(false, true);
		// drawMessage("ざんねん　まけてしまった");
		// }
		//
		// // vx++;
		// // moveX += vx;
		// //
		// // if( moveX > 0 )
		// // {
		// // moveX = 0;
		// // }
		//
		// // draw.createFont(0, 50);
		// // draw.printf(0, 32, draw.getHeight() * 6.0f / 8.0f, "せんとうしゅうりょう。");
		//
	}

	@ Override
	public void CleanUp() {}
}
